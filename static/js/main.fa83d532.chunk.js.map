{"version":3,"sources":["logo.png","serviceWorker.js","Components/Card.js","Components/cardList.js","Components/SearchBox.js","Navigation.js","Containers/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Card","id","nickname","name","status","img","occ","date","actor","class","src","alt","style","height","color","CardList","items","map","user","i","occupation","SearchBox","searchfield","searchchange","className","type","placeholder","onChange","width","Navigation","onRouteChange","logo","App","onSearchChange","event","setState","target","value","state","filter","robots","toLowerCase","includes","fetch","then","res","json","data","item","portrayed","birthday","filteredrobots","this","input","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa83d532.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3795f66d.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Card.css'\r\n\r\n\r\nconst Card = ({id, nickname, name, status, img, occ, date, actor}) => {\r\n\treturn (\r\n\r\n\t\t<div class=\"flip-card dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<div class=\"flip-card-inner\">\r\n\t\t\t\t<div class=\"flip-card-front\">\r\n\t\t\t\t\t<img src= {img} \r\n\t\t\t\t\talt={name}\r\n\t\t\t\t\tstyle={{height:\"300px\"}} \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"flip-card-back\">\r\n\t\t\t\t\t<h1 style={{color:\"white\"}}>{name}</h1>\r\n\t\t\t\t\t<p>Birthday: {date} </p>\r\n\t\t\t\t\t<p>NickName : {nickname}</p>\r\n\t\t\t\t\t<p>Status: {status}</p>\r\n\t\t\t\t\t<p>Occupation : {occ + \" \"}</p>\r\n\t\t\t\t\t<p>Actor : {actor}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({items}) => {\r\n\treturn (\r\n\r\n\t\t<div>\r\n\t\t\t{\r\n\r\n\t\t\t\titems.map((user,i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\tid={i}\r\n\t\t\t\t\t\tname={items[i].name} \r\n\t\t\t\t\t\tnickname={items[i].nickname} \r\n\t\t\t\t\t\tstatus={items[i].status} \r\n\t\t\t\t\t\timg = {items[i].img}\r\n\t\t\t\t\t\tocc = {items[i].occupation}\r\n\t\t\t\t\t\tdate = {items[i].date}\r\n\t\t\t\t\t\tactor = {items[i].actor}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchchange}) => {\r\n\treturn(\r\n\t\t<div className='pd2 ma3'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa2 ma3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search character' \r\n\t\t\tonChange={searchchange}\r\n\t\t\tstyle={{width:\"350px\"}}\r\n\t\t\t />\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport './Navigation.css';\r\nimport logo from './logo.png';\r\n\r\nconst Navigation = ({onRouteChange}) => {\r\n    return (\r\n        <div>\r\n            <img src={logo} alt=\"logo\" style={{height:\"130px\"}} className=\"pa3\" />\r\n        </div>\r\n    )\r\n}\r\nexport default Navigation; ","import React, {Component} from 'react';\r\nimport CardList from '../Components/cardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Navigation from '../Navigation.js';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tsearchfield:'',\r\n\t\t\titems:[],\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://www.breakingbadapi.com/api/characters')\r\n\t\t.then(res => res.json())\r\n\t\t.then(data => {\r\n\t\t\tthis.setState({ \r\n\t\t\t\titems: data.map(item =>({\r\n\t\t\t\t\tname : item.name,\r\n\t\t\t\t\tnickname : item.nickname,\r\n\t\t\t\t\tactor : item.portrayed,\r\n\t\t\t\t\tstatus : item.status,\r\n\t\t\t\t\timg : item.img,\r\n\t\t\t\t\toccupation : item.occupation,\r\n\t\t\t\t\tdate : item.birthday,\r\n\t\t\t\t}))\r\n\t\t\t})\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\tonSearchChange = (event)=>{\r\n\t\tthis.setState({searchfield:event.target.value});\r\n\t\tconst filteredrobots = this.state.items.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst filteredrobots = this.state.items.filter(input =>{\r\n\t\t\treturn input.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\t\t\r\n\t\treturn(\r\n\t\t\t\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t<Navigation onRouteChange = {this.onRouteChange}/>\r\n\t\t\t\t\t<SearchBox searchchange={this.onSearchChange}/>\r\n\t\t\t\t\t<CardList items = {filteredrobots} />\r\n\t\r\n\t\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './Containers/App';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \t\r\n  \t<App />\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"],"sourceRoot":""}